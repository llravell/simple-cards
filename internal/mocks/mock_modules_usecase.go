// Code generated by MockGen. DO NOT EDIT.
// Source: modules.go
//
// Generated by this command:
//
//	mockgen -source=modules.go -destination=../mocks/mock_modules_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	usecase "github.com/llravell/simple-cards/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockQuizletImportWorkerPool is a mock of QuizletImportWorkerPool interface.
type MockQuizletImportWorkerPool struct {
	ctrl     *gomock.Controller
	recorder *MockQuizletImportWorkerPoolMockRecorder
	isgomock struct{}
}

// MockQuizletImportWorkerPoolMockRecorder is the mock recorder for MockQuizletImportWorkerPool.
type MockQuizletImportWorkerPoolMockRecorder struct {
	mock *MockQuizletImportWorkerPool
}

// NewMockQuizletImportWorkerPool creates a new mock instance.
func NewMockQuizletImportWorkerPool(ctrl *gomock.Controller) *MockQuizletImportWorkerPool {
	mock := &MockQuizletImportWorkerPool{ctrl: ctrl}
	mock.recorder = &MockQuizletImportWorkerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizletImportWorkerPool) EXPECT() *MockQuizletImportWorkerPoolMockRecorder {
	return m.recorder
}

// QueueWork mocks base method.
func (m *MockQuizletImportWorkerPool) QueueWork(w *usecase.QuizletImportWork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWork", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWork indicates an expected call of QueueWork.
func (mr *MockQuizletImportWorkerPoolMockRecorder) QueueWork(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWork", reflect.TypeOf((*MockQuizletImportWorkerPool)(nil).QueueWork), w)
}
