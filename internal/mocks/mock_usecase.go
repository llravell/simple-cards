// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../mocks/mock_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/llravell/simple-cards/internal/entity"
	quizlet "github.com/llravell/simple-cards/pkg/quizlet"
	gomock "go.uber.org/mock/gomock"
)

// MockHealthRepository is a mock of HealthRepository interface.
type MockHealthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthRepositoryMockRecorder
	isgomock struct{}
}

// MockHealthRepositoryMockRecorder is the mock recorder for MockHealthRepository.
type MockHealthRepositoryMockRecorder struct {
	mock *MockHealthRepository
}

// NewMockHealthRepository creates a new mock instance.
func NewMockHealthRepository(ctrl *gomock.Controller) *MockHealthRepository {
	mock := &MockHealthRepository{ctrl: ctrl}
	mock.recorder = &MockHealthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthRepository) EXPECT() *MockHealthRepositoryMockRecorder {
	return m.recorder
}

// PingContext mocks base method.
func (m *MockHealthRepository) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockHealthRepositoryMockRecorder) PingContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockHealthRepository)(nil).PingContext), ctx)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindUserByLogin mocks base method.
func (m *MockUserRepository) FindUserByLogin(ctx context.Context, login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByLogin", ctx, login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByLogin indicates an expected call of FindUserByLogin.
func (mr *MockUserRepositoryMockRecorder) FindUserByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByLogin", reflect.TypeOf((*MockUserRepository)(nil).FindUserByLogin), ctx, login)
}

// StoreUser mocks base method.
func (m *MockUserRepository) StoreUser(ctx context.Context, login, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", ctx, login, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockUserRepositoryMockRecorder) StoreUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockUserRepository)(nil).StoreUser), ctx, login, password)
}

// MockModulesRepository is a mock of ModulesRepository interface.
type MockModulesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockModulesRepositoryMockRecorder
	isgomock struct{}
}

// MockModulesRepositoryMockRecorder is the mock recorder for MockModulesRepository.
type MockModulesRepositoryMockRecorder struct {
	mock *MockModulesRepository
}

// NewMockModulesRepository creates a new mock instance.
func NewMockModulesRepository(ctrl *gomock.Controller) *MockModulesRepository {
	mock := &MockModulesRepository{ctrl: ctrl}
	mock.recorder = &MockModulesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModulesRepository) EXPECT() *MockModulesRepositoryMockRecorder {
	return m.recorder
}

// CreateNewModule mocks base method.
func (m *MockModulesRepository) CreateNewModule(ctx context.Context, userUUID, moduleName string) (*entity.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewModule", ctx, userUUID, moduleName)
	ret0, _ := ret[0].(*entity.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewModule indicates an expected call of CreateNewModule.
func (mr *MockModulesRepositoryMockRecorder) CreateNewModule(ctx, userUUID, moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewModule", reflect.TypeOf((*MockModulesRepository)(nil).CreateNewModule), ctx, userUUID, moduleName)
}

// CreateNewModuleWithCards mocks base method.
func (m *MockModulesRepository) CreateNewModuleWithCards(ctx context.Context, moduleWithCards *entity.ModuleWithCards) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewModuleWithCards", ctx, moduleWithCards)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewModuleWithCards indicates an expected call of CreateNewModuleWithCards.
func (mr *MockModulesRepositoryMockRecorder) CreateNewModuleWithCards(ctx, moduleWithCards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewModuleWithCards", reflect.TypeOf((*MockModulesRepository)(nil).CreateNewModuleWithCards), ctx, moduleWithCards)
}

// DeleteModule mocks base method.
func (m *MockModulesRepository) DeleteModule(ctx context.Context, userUUID, moduleUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModule", ctx, userUUID, moduleUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModule indicates an expected call of DeleteModule.
func (mr *MockModulesRepositoryMockRecorder) DeleteModule(ctx, userUUID, moduleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModule", reflect.TypeOf((*MockModulesRepository)(nil).DeleteModule), ctx, userUUID, moduleUUID)
}

// GetAllModules mocks base method.
func (m *MockModulesRepository) GetAllModules(ctx context.Context, userUUID string) ([]*entity.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllModules", ctx, userUUID)
	ret0, _ := ret[0].([]*entity.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllModules indicates an expected call of GetAllModules.
func (mr *MockModulesRepositoryMockRecorder) GetAllModules(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllModules", reflect.TypeOf((*MockModulesRepository)(nil).GetAllModules), ctx, userUUID)
}

// GetModule mocks base method.
func (m *MockModulesRepository) GetModule(ctx context.Context, userUUID, moduleUUID string) (*entity.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule", ctx, userUUID, moduleUUID)
	ret0, _ := ret[0].(*entity.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModule indicates an expected call of GetModule.
func (mr *MockModulesRepositoryMockRecorder) GetModule(ctx, userUUID, moduleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockModulesRepository)(nil).GetModule), ctx, userUUID, moduleUUID)
}

// ModuleExists mocks base method.
func (m *MockModulesRepository) ModuleExists(ctx context.Context, userUUID, moduleUUID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleExists", ctx, userUUID, moduleUUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleExists indicates an expected call of ModuleExists.
func (mr *MockModulesRepositoryMockRecorder) ModuleExists(ctx, userUUID, moduleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleExists", reflect.TypeOf((*MockModulesRepository)(nil).ModuleExists), ctx, userUUID, moduleUUID)
}

// UpdateModule mocks base method.
func (m *MockModulesRepository) UpdateModule(ctx context.Context, userUUID, moduleUUID, moduleName string) (*entity.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModule", ctx, userUUID, moduleUUID, moduleName)
	ret0, _ := ret[0].(*entity.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModule indicates an expected call of UpdateModule.
func (mr *MockModulesRepositoryMockRecorder) UpdateModule(ctx, userUUID, moduleUUID, moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModule", reflect.TypeOf((*MockModulesRepository)(nil).UpdateModule), ctx, userUUID, moduleUUID, moduleName)
}

// MockCardsRepository is a mock of CardsRepository interface.
type MockCardsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardsRepositoryMockRecorder
	isgomock struct{}
}

// MockCardsRepositoryMockRecorder is the mock recorder for MockCardsRepository.
type MockCardsRepositoryMockRecorder struct {
	mock *MockCardsRepository
}

// NewMockCardsRepository creates a new mock instance.
func NewMockCardsRepository(ctrl *gomock.Controller) *MockCardsRepository {
	mock := &MockCardsRepository{ctrl: ctrl}
	mock.recorder = &MockCardsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardsRepository) EXPECT() *MockCardsRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardsRepository) CreateCard(ctx context.Context, card *entity.Card) (*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, card)
	ret0, _ := ret[0].(*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardsRepositoryMockRecorder) CreateCard(ctx, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardsRepository)(nil).CreateCard), ctx, card)
}

// DeleteCard mocks base method.
func (m *MockCardsRepository) DeleteCard(ctx context.Context, moduleUUID, cardUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, moduleUUID, cardUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockCardsRepositoryMockRecorder) DeleteCard(ctx, moduleUUID, cardUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockCardsRepository)(nil).DeleteCard), ctx, moduleUUID, cardUUID)
}

// GetModuleCards mocks base method.
func (m *MockCardsRepository) GetModuleCards(ctx context.Context, moduleUUID string) ([]*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleCards", ctx, moduleUUID)
	ret0, _ := ret[0].([]*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleCards indicates an expected call of GetModuleCards.
func (mr *MockCardsRepositoryMockRecorder) GetModuleCards(ctx, moduleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleCards", reflect.TypeOf((*MockCardsRepository)(nil).GetModuleCards), ctx, moduleUUID)
}

// SaveCard mocks base method.
func (m *MockCardsRepository) SaveCard(ctx context.Context, card *entity.Card) (*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCard", ctx, card)
	ret0, _ := ret[0].(*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCard indicates an expected call of SaveCard.
func (mr *MockCardsRepositoryMockRecorder) SaveCard(ctx, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCard", reflect.TypeOf((*MockCardsRepository)(nil).SaveCard), ctx, card)
}

// MockJWTIssuer is a mock of JWTIssuer interface.
type MockJWTIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockJWTIssuerMockRecorder
	isgomock struct{}
}

// MockJWTIssuerMockRecorder is the mock recorder for MockJWTIssuer.
type MockJWTIssuerMockRecorder struct {
	mock *MockJWTIssuer
}

// NewMockJWTIssuer creates a new mock instance.
func NewMockJWTIssuer(ctrl *gomock.Controller) *MockJWTIssuer {
	mock := &MockJWTIssuer{ctrl: ctrl}
	mock.recorder = &MockJWTIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTIssuer) EXPECT() *MockJWTIssuerMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockJWTIssuer) Issue(userUUID string, ttl time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", userUUID, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockJWTIssuerMockRecorder) Issue(userUUID, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockJWTIssuer)(nil).Issue), userUUID, ttl)
}

// MockQuizletModuleParser is a mock of QuizletModuleParser interface.
type MockQuizletModuleParser struct {
	ctrl     *gomock.Controller
	recorder *MockQuizletModuleParserMockRecorder
	isgomock struct{}
}

// MockQuizletModuleParserMockRecorder is the mock recorder for MockQuizletModuleParser.
type MockQuizletModuleParserMockRecorder struct {
	mock *MockQuizletModuleParser
}

// NewMockQuizletModuleParser creates a new mock instance.
func NewMockQuizletModuleParser(ctrl *gomock.Controller) *MockQuizletModuleParser {
	mock := &MockQuizletModuleParser{ctrl: ctrl}
	mock.recorder = &MockQuizletModuleParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizletModuleParser) EXPECT() *MockQuizletModuleParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockQuizletModuleParser) Parse(moduleID string) ([]quizlet.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", moduleID)
	ret0, _ := ret[0].([]quizlet.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockQuizletModuleParserMockRecorder) Parse(moduleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockQuizletModuleParser)(nil).Parse), moduleID)
}
